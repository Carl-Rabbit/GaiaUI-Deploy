{
  projectId: 'sat-score-task4',
  chart: './sat-score.svg',
  audio: './sat-score.txt',
  comment: 'start of task 4',
  binder: {
    from: "svg",
    to: "gaia.chart.BarChart",
    rules: [
      // chart title
      {
        from: ".title",
        to: ".BarChart > .Title",
      },
      // bars
      {
        from: ".bar",
        to: ".Bar",
        dataList: [
          { xVal: 'Less than $20,000', yVal: 890 },
          { xVal: '$40,000', yVal: 930 },
          { xVal: '$60,000', yVal: 980 },
          { xVal: '$80,000', yVal: 1010 },
          { xVal: '$100,000', yVal: 1030 },
          { xVal: '$140,000', yVal: 1090 },
          { xVal: 'More than $200,000', yVal: 1150 },
        ]
      },
      // bar label
      {
        from: '.bar-label',
        to: '.BarLabel',
        dataList: [
          { xVal: 'Less than $20,000', yVal: 890 },
          { xVal: 'More than $200,000', yVal: 1150 },
        ]
      },
      // x axis
      {
        from: '.x-domain',
        to: '.XAxis .Domain',
      },
      {
        from: '.x-label',
        to: '.XAxis .Label',
        dataList: [
          { xVal: 'Less than $20,000', yVal: 890 },
          { xVal: '$40,000', yVal: 930 },
          { xVal: '$60,000', yVal: 980 },
          { xVal: '$80,000', yVal: 1010 },
          { xVal: '$100,000', yVal: 1030 },
          { xVal: '$140,000', yVal: 1090 },
          { xVal: 'More than $200,000', yVal: 1150 },
        ]
      },
      // y axis
      {
        from: '.y-tick',
        to: '.YAxis .Tick',
      },
      {
        from: '.y-label',
        to: '.YAxis .Label',
      },
      // annotation
      {
        from: '.annotation.line',
        to: '.Annotation .Line',
      },
      {
        from: '.annotation.label',
        to: '.Annotation .Label',
      }
    ]
  },
  animation: {
    comments: [
      "Task 4: Reusing across Different Infographics",
      "0. We have copied the template 'CategoryEnter' without any change. We also provide other templates 'CategoryEnterPrepare', 'AnnotationEnter' and 'StaggeredCategoryEnter' for you.",
      "1. Use 'CategoryEnter' to create animations for the first and the last bar groups (at 5s and 17.5s). Tips: you can find the data in binder or target tab. Add two dashes \\ to escape the $ sign.",
      "2. Creat the stagger animation of the middle 5 bars (at 13s) using 'StaggeredCategoryEnter'. Tips: See the param definitions. The bar list is sorted from the top to the bottom.",
      "3. Fine-tune 'CategoryEnterPrepare'. You might refer to its param definitions in Template tab. In this case, the dashed lines are Ticks."
    ],
    main: {
      sync: [
        {
          ref: 'CategoryEnterPrepare',
        },
        {
          ref: 'Empty',
          offset: 5,
        },
        {
          ref: 'AnnotationEnter',
          offset: 11,
        },
        {
          ref: 'Empty',
          offset: 13,
        },
        {
          ref: 'Empty',
          offset: 17.5,
        }
      ]
    },
  },
  templates: [
    {
      name: 'CategoryEnter',
      params: {
        category: { type: "string" },
      },
      main: {
        sync: [
          {
            ref: 'WipeIn',
            target: '.Bar[xVal="$category"]',
            from: 'left',
          },
          {
            ref: 'CutIn',
            target: '.AxisLabel[xVal="$category"]',
          },
          {
            ref: 'CutIn',
            target: '.BarLabel[xVal="$category"]',
            offset: 1,
          }
        ]
      }
    },
    {
      name: 'CategoryEnterPrepare',
      params: {
        xDomainWipeFrom: "left",
        yDomainWipeFrom: "bottom",
        xTickWipeFrom: 'top',
        yTickWipeFrom: 'right',
        lineEnterDuration: 3,
        yAxisLabelEffect: 'CutIn',
        axisLabelOffset: 2,
      },
      main: {
        sync: [
          {
            ref: 'CutIn',
            target: '.Title',
            from: 'bottom',
          },
          {
            ref: 'WipeIn',
            target: '.XAxis.Domain',
            ease: 'power3.inOut',
            from: '$xDomainWipeFrom',
            duration: '$lineEnterDuration',
          },
          {
            ref: 'WipeIn',
            target: '.YAxis.Domain',
            ease: 'power3.inOut',
            from: '$yDomainWipeFrom',
            duration: '$lineEnterDuration'
          },
          {
            ref: 'WipeIn',
            target: '.XAxis.Tick',
            ease: 'power3.inOut',
            from: '$xTickWipeFrom',
            duration: '$lineEnterDuration'
          },
          {
            ref: 'WipeIn',
            target: '.YAxis.Tick',
            ease: 'power3.inOut',
            from: '$yTickWipeFrom',
            duration: '$lineEnterDuration'
          },
          {
            ref: '$yAxisLabelEffect',
            target: '.YAxis.Label',
            offset: '$axisLabelOffset',
          }
        ]
      }
    },
    {
      name: 'AnnotationEnter',
      params: {
        lineEffect: 'Fade',
        labelEffect: 'CutIn',
      },
      main: {
        sync: [
          {
            ref: '$lineEffect',
            target: '.Annotation.Line',
          },
          {
            ref: '$labelEffect',
            target: '.Annotation.Label',
          }
        ]
      }
    },
    {
      name: 'StaggeredCategoryEnter',
      params: {
        startIdx: { type: "number" },
        endIdx: { type: "number" },
        staggerValue: 0.2,
        barWipeFrom: 'bottom',
        barLabelEffect: 'CutIn',
        axisLabelEffect: 'CutIn',
      },
      main: {
        sync: [
          {
            ref: 'WipeIn',
            target: [
              { filter: '.Bar' },
              { slice: ['$startIdx', '$endIdx'] },
            ],
            from: '$barWipeFrom',
            stagger: '$staggerValue',
          },
          {
            ref: '$barLabelEffect',
            target: [
              { filter: '.BarLabel' },
              { slice: ['$startIdx', '$endIdx'] },
            ],
            stagger: '$staggerValue',
          },
          {
            ref: '$axisLabelEffect',
            target: [
              { filter: '.XAxis.Label' },
              { slice: ['$startIdx', '$endIdx'] },
            ],
            stagger: '$staggerValue',
          }
        ]
      }
    }
  ]
}
